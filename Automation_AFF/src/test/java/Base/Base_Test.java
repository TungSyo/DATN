package Base;

import java.io.IOException;
import java.io.InputStream;
import java.net.URISyntaxException;
import java.time.Duration;
import java.util.Properties;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.BeforeSuite;
import org.testng.annotations.AfterSuite;
import Driver.Browser_Type;
import Driver.Driver_Manager;
import Utils.ConfigUtil;
import Utils.ScreenShotUtil;
import Report.Extend_Report;

@SuppressWarnings("unused")
public class Base_Test {

    @BeforeSuite(alwaysRun = true)
    public void beforeSuite() throws IOException, URISyntaxException {
        Extend_Report.startReport();
    }

    @BeforeMethod(alwaysRun = true)
    public void setUp() throws IOException {
        System.out.println("‚ö° ƒêang thi·∫øt l·∫≠p tr√¨nh duy·ªát...");

        String browserConfig = ConfigUtil.getProperty("browser");
        if (browserConfig == null || browserConfig.trim().isEmpty()) {
            throw new IllegalArgumentException(
                    "‚ö† L·ªói: C·∫•u h√¨nh 'browser' kh√¥ng ƒë∆∞·ª£c t√¨m th·∫•y ho·∫∑c ƒë·ªÉ tr·ªëng trong file config.properties!");
        }

        Browser_Type browser;
        try {
            browser = Browser_Type.valueOf(browserConfig.toUpperCase());
        } catch (IllegalArgumentException e) {
            throw new IllegalArgumentException("‚ö† L·ªói: Tr√¨nh duy·ªát '" + browserConfig
                    + "' kh√¥ng h·ª£p l·ªá! H√£y ki·ªÉm tra l·∫°i file config.properties.");
        }

        System.out.println("üåç ƒêang kh·ªüi ch·∫°y tr√¨nh duy·ªát: " + browser);

        Driver_Manager.initDriver(browser);

        Driver_Manager.getDriver().manage().timeouts().pageLoadTimeout(Duration.ofSeconds(10));
        Driver_Manager.getDriver().manage().timeouts().implicitlyWait(Duration.ofSeconds(5));
    }
    
    @AfterMethod(alwaysRun = true)
    public void tearDown() {
        if (Driver_Manager.getDriver() != null) {
            try {
                System.out.println("üõë ƒê√≥ng tr√¨nh duy·ªát...");
                Driver_Manager.quitDriver();
            } catch (Exception e) {
                System.out.println("üö® L·ªói khi ƒë√≥ng tr√¨nh duy·ªát: " + e.getMessage());
            }
        } else {
            System.out.println("üö´ Tr√¨nh duy·ªát ƒë√£ ƒë∆∞·ª£c ƒë√≥ng ho·∫∑c kh√¥ng t·ªìn t·∫°i.");
        }
    }

    @AfterSuite(alwaysRun = true)
    public void afterSuite() {
        Extend_Report.endReport();
    }

}